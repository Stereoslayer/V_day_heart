import React, { useState, useEffect, useMemo } from 'react';

const heartPattern = [
  "..xxx...xxx..",
  ".xxxxx.xxxxx.",
  "xxxxxxxxxxxxx",
  "xxxxxxxxxxxxx",
  "xxxxxxxxxxxxx",
  "xxxxxxxxxxxxx",
  ".xxxxxxxxxxx.",
  "..xxxxxxxxx..",
  "...xxxxxxx...",
  "....xxxxx....",
  ".....xxx.....",
  "......x......",
  ".............",
  "............."
];

const romanticPhrases = [
  "–¢—ã –º–æ—ë —Å—á–∞—Å—Ç—å–µ ‚ù§Ô∏è",
  "–õ—é–±–ª—é —Ç–µ–±—è –±–µ–∑–º–µ—Ä–Ω–æ üíï",
  "–¢—ã –º–æ—ë —Å–æ–ª–Ω—Ü–µ ‚òÄÔ∏è",
  "–° —Ç–æ–±–æ–π –∫–∞–∂–¥–æ–µ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ–µ üíñ",
  "–¢—ã –¥–µ–ª–∞–µ—à—å –º–æ–π –º–∏—Ä —è—Ä—á–µ üåü",
  "–¢—ã –º–æ–µ —Å–µ—Ä–¥—Ü–µ üíò",
  "–ù–∞–≤—Å–µ–≥–¥–∞ –≤–º–µ—Å—Ç–µ üíû",
  "–¢—ã –º–æ–π –∏–¥–µ–∞–ª üíì"
];

function Pixel({ style, onClick }) {
  const [letter, setLetter] = useState("–ù");
  const animationDelay = useMemo(() => `${Math.random() * 4}s`, []);

  useEffect(() => {
    const timeout = setTimeout(() => {
      setLetter(prev => (prev === "–ù" ? "–ê" : "–ù"));
    }, Math.random() * 3000 + 2000);
    return () => clearTimeout(timeout);
  }, [letter]);

  const oppositeLetter = letter === "–ù" ? "–ê" : "–ù";

  const content = `${letter}+${oppositeLetter}`;

  return (
    <div className="pixel" onClick={onClick} style={style}>
      <span className="pixel-text" style={{ animationDelay }}>
        {content}
      </span>
    </div>
  );
}

function App() {
  const [phrase, setPhrase] = useState("14.02.2025");

  const gap = 2;
  const pixelSize = 50;

  return (
    <div className="app">
      <div className="phrase">{phrase}</div>
      <div className="heart-container">
        {heartPattern.map((row, rowIndex) =>
          row.split('').map((cell, colIndex) => {
            if (cell === 'x') {
              const style = {
                position: "absolute",
                top: rowIndex * (pixelSize + gap) + "px",
                left: colIndex * (pixelSize + gap) + "px"
              };
              return (
                <Pixel
                  key={`${rowIndex}-${colIndex}`}
                  style={style}
                  onClick={() =>
                    setPhrase(
                      romanticPhrases[
                        Math.floor(Math.random() * romanticPhrases.length)
                      ]
                    )
                  }
                />
              );
            }
            return null;
          })
        )}
      </div>
    </div>
  );
}

export default App;
